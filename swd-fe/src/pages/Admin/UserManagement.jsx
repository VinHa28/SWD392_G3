// ./pages/Admin/UserManagement.jsx

import React, { useState } from "react";
import { Table, Button, Space, Modal, Form, Input, Select, Tag } from "antd";
import { EditOutlined, DeleteOutlined, PlusOutlined } from "@ant-design/icons";

const { Option } = Select;

// D·ªØ li·ªáu m·∫´u (s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·∫±ng API call sau)
const initialUsers = [
  {
    id: 1,
    key: "1",
    username: "admin_user",
    email: "admin@example.com",
    role: "ADMIN",
    status: "Active",
  },
  {
    id: 2,
    key: "2",
    username: "jane_doe",
    email: "jane@example.com",
    role: "USER",
    status: "Active",
  },
  {
    id: 3,
    key: "3",
    username: "johnny_banned",
    email: "john@example.com",
    role: "USER",
    status: "Banned",
  },
];

export default function UserManagement() {
  const [users, setUsers] = useState(initialUsers);
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [editingUser, setEditingUser] = useState(null); // null: th√™m m·ªõi, object: ch·ªânh s·ª≠a
  const [form] = Form.useForm();

  const showModal = (user = null) => {
    setEditingUser(user);
    if (user) {
      form.setFieldsValue(user);
    } else {
      form.resetFields();
    }
    setIsModalVisible(true);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
    setEditingUser(null);
    form.resetFields();
  };

  const onFinish = (values) => {
    // ‚ö†Ô∏è Logic Call API:
    // N·∫øu editingUser c√≥ id -> PUT/PATCH (C·∫≠p nh·∫≠t)
    // N·∫øu editingUser l√† null -> POST (Th√™m m·ªõi)

    if (editingUser) {
      // C·∫≠p nh·∫≠t UI (T·∫°m th·ªùi)
      setUsers(
        users.map((user) =>
          user.id === editingUser.id ? { ...user, ...values } : user
        )
      );
    } else {
      // Th√™m m·ªõi UI (T·∫°m th·ªùi)
      const newUser = {
        ...values,
        id: Date.now(),
        key: Date.now().toString(),
        status: "Active", // M·∫∑c ƒë·ªãnh l√† Active
      };
      setUsers([...users, newUser]);
    }

    setIsModalVisible(false);
  };

  const handleDelete = (id) => {
    // ‚ö†Ô∏è Logic Call API: DELETE
    Modal.confirm({
      title: "X√°c nh·∫≠n X√≥a",
      content: `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng c√≥ ID: ${id}?`,
      onOk() {
        // X√≥a kh·ªèi UI (T·∫°m th·ªùi)
        setUsers(users.filter((user) => user.id !== id));
        // console.log(`API X√≥a user ID: ${id}`);
      },
    });
  };

  const columns = [
    {
      title: "ID",
      dataIndex: "id",
      key: "id",
    },
    {
      title: "T√™n ƒëƒÉng nh·∫≠p",
      dataIndex: "username",
      key: "username",
    },
    {
      title: "Email",
      dataIndex: "email",
      key: "email",
    },
    {
      title: "Vai tr√≤",
      dataIndex: "role",
      key: "role",
      render: (role) => (
        <Tag color={role === "ADMIN" ? "volcano" : "green"}>{role}</Tag>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      render: (status) => (
        <Tag color={status === "Active" ? "blue" : "red"}>{status}</Tag>
      ),
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Button
            icon={<EditOutlined />}
            onClick={() => showModal(record)}
            type="primary"
            ghost
          >
            S·ª≠a
          </Button>
          <Button
            icon={<DeleteOutlined />}
            onClick={() => handleDelete(record.id)}
            type="primary"
            danger
          >
            X√≥a
          </Button>
        </Space>
      ),
    },
  ];

  return (
    <>
      <h2>Qu·∫£n l√Ω Ng∆∞·ªùi d√πng üßë‚Äçüíª</h2>
      <Button
        type="primary"
        icon={<PlusOutlined />}
        onClick={() => showModal(null)}
        style={{ marginBottom: 16 }}
      >
        Th√™m Ng∆∞·ªùi d√πng m·ªõi
      </Button>
      <Table columns={columns} dataSource={users} rowKey="id" />

      <Modal
        title={editingUser ? "Ch·ªânh s·ª≠a Ng∆∞·ªùi d√πng" : "Th√™m Ng∆∞·ªùi d√πng m·ªõi"}
        open={isModalVisible}
        onCancel={handleCancel}
        footer={null} // T·∫Øt footer m·∫∑c ƒë·ªãnh ƒë·ªÉ d√πng n√∫t trong Form
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={onFinish}
          initialValues={{ role: "USER" }}
        >
          <Form.Item
            name="username"
            label="T√™n ƒëƒÉng nh·∫≠p"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p t√™n ƒëƒÉng nh·∫≠p!" },
            ]}
          >
            <Input />
          </Form.Item>
          <Form.Item
            name="email"
            label="Email"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p Email!" }]}
          >
            <Input type="email" />
          </Form.Item>
          <Form.Item
            name="role"
            label="Vai tr√≤"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn vai tr√≤!" }]}
          >
            <Select>
              <Option value="ADMIN">ADMIN</Option>
              <Option value="USER">USER</Option>
            </Select>
          </Form.Item>
          {!editingUser && (
            <Form.Item
              name="password"
              label="M·∫≠t kh·∫©u"
              rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" }]}
            >
              <Input.Password />
            </Form.Item>
          )}

          <Form.Item>
            <Button type="primary" htmlType="submit">
              {editingUser ? "C·∫≠p nh·∫≠t" : "Th√™m m·ªõi"}
            </Button>
            <Button onClick={handleCancel} style={{ marginLeft: 8 }}>
              H·ªßy
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </>
  );
}